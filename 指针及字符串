#define _CRT_SECURE_NO_WARNINGS 1
//写一个函数打印arr数组的内容，不使用数组下标，使用指针。
//arr是一个整形一维数组。
//#include<stdio.h>
//void print(int* arr, int sz);
//int main()
//{
//	int arr[10] = { 0,1,2,3,4,5,6,7,8,9 };
//	int* pp = arr;
//	int sz = sizeof(arr) / sizeof(arr[1]);
//	print(arr, sz);
//	return 0;
//}
//void print(int* arr,int sz)
//{
//	int  i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", *(arr + i));
//	}
//}
//                以单词位单位逆序字符串，带空格
//#include<stdio.h>
//#include<string.h>
//void print(char* str, int j, int i)
//{
//    i--;
//    while (j < i)
//    {
//        char pp = str[j];
//        str[j] = str[i];
//        str[i] = pp;
//        j++;
//        i--;
//    }
//}
//int main()
//{
//    char str[1000] = { 0 };
//    gets(str);
//    int i = 0;//右
//    int j = 0;//左
//    while (1)
//    {
//        j = i;
//        while (1)
//        {
//            if (str[i] == '\0' || str[i] == ' ')//检测每一个词
//            {
//                break;
//            }
//            i++;
//        }
//        if (str[i] == '\0')
//        {
//            print(str, j, i);
//            break;
//        }
//        if (str[i] == ' ')
//        {
//            print(str, j, i);
//            i++;
//        }
//    }
//    print(str, 0, strlen(str));
//    printf("%s", str);
//    return 0;
//}

//                 sizeof求结构体大小
//#include<stdio.h>
//struct ts
//{
//	char name[50];
//	int price;
//};
//void print(struct ts* dd)
//{
//	printf("%d\n", dd->price);
//	printf("%d\n", dd[1].price);
//}
//int main()
//{
//	struct ts pp[3] = { {"aaa",12},{"bbb",22},{"ccc",33} };
//	int i = sizeof(pp)/sizeof(pp[0]);
//	printf("%d\n", i);
//	printf("%s\n", pp[1].name);
//	print(pp);
//	return 0;
//}

//          指针数组

//          是用来存储指针的
//#include<stdio.h>
//int main()
//{
//	int i = 0;
//	int a = 0;
//	int* c = &i;
//	int* d = &a;
//	int* (b[2]) = { c,d };//b有两个元素，他们都是指针指向int类型
//	*b[0] = 2;
//	printf("%d", i);
//	return 0;
//}

//   数组指针
//   用来存放数组的

//#include<stdio.h>
//int main()
//{
//	int i[10] = { 0,1,2,3,4,5,6,7,8,9 };
//	int (*pp)[10] = &i;//pp是指针变量，指向一个一维数组，有十个元素，元素类型int
//	int j = 0;
//	for (j = 0; j < 10; j++)
//	{
//		printf("%d", (*pp)[j]);
//	}
//	return 0;
//}
//                 结构体指针
//#include < stdio.h >
//struct S
//{
//	int a;
//	int b;
//};
//int main()
//{
//  //     int a ,b =0;//和下一句语法一样;    
//	struct S a, * p = &a;
//	a.a = 99;
//	printf("%d\n", p->a);
//	printf("%d\n", (*p).a);
//	return 0;
//}

//                const的使用
//#include<stdio.h>
//int main()
//{
//	int i = 0;
//	int a = 9;
//	int const* pp = &i;
//	pp = &a;
//	printf("%d", *pp);
//	return 0;
//}

//          越界导致的死循环
//#include <stdio.h>
//int main()
//{
//    int i = 0;
//    int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//    for (i = 0; i <= 12; i++)//10个元素设定循环13次，越界访问后
//    {                        //刚好访问但i的地址，然后i被赋值为零
//        arr[i] = 0;         //导致程序死循环
//        printf("hello bit\n");
//    }
//    return 0;
//}

//         调整数组使奇数全部都位于偶数前面。

//#include<stdio.h>
//void print(int arr[], int sz)
//{
//	int i = 0;
//	int j = 0;
//	for (i = 0; i < sz - 1; i++)
//	{
//		for (j = 0; j < sz - 1 - i; j++)
//		{
//			if (arr[j] % 2 == 0 && arr[j + 1] % 2 != 0)
//			{
//				int dd = arr[j];
//				arr[j] = arr[j + 1];
//				arr[j + 1] = dd;
//			}
//		}
//	}
//}
//int main()
//{
//	int i[10] = { 2,4,6,8,10,2,4,6,8,1 };
//	int j = 0;
//	/*for (j = 0; j < 10; j++)
//	{
//		scanf("%d", &i[j]);
//	}*/
//	print(i, 10);//排序
//	for (j = 0; j < 10; j++)
//	{
//		printf("%d ", i[j]);
//	}
//	return 0;
//}

//           strcmp的使用
//#include<stdio.h>
//#include<string.h>
//int main()
//{
//	char str1[11] = { "zhu ge bif" };
//	char str2[11] = { "zhu ge bif" };
//	int i = strcmp(str1, str2);
//	if (i == 0)
//	{
//		printf("相等");
//	}
//	else
//	{
//		printf("不相等");
//	}
//	return 0;
//}

//                   模拟实现strcmp

//#include<stdio.h>
//#include<string.h>
//int str(char str1[], char str2[])
//{
//	int i = 0;
//	while (1)
//	{
//		if (str1[i] == str2[i])
//		{
//			if (str1[i] == '\0')
//			{
//				return 0;
//			}
//			i++;
//		}
//		else
//			return 1;
//		
//	}
//}
//int main()
//{
//	char str1[11] = { "zhu ge bif" };
//	char str2[11] = { "zhu ge bif" };
//	int i = str(str1, str2);
//	if (i == 0)
//	{
//		printf("相等");
//	}
//	else
//	{
//		printf("不相等");
//	}
//	return 0;
//}
//                测试
//#include<stdio.h>
//#include<string.h>
//int main()
//{
//	char i[15] = "fdkf sdnf ";
//	int a = strlen(i);
//	int n = '\0';
//	int pp = ' ';
//	printf("%d\n",n );
//	printf("%d\n", pp);
//	return 0;
//}
//                 模拟实现strlen
//#include<stdio.h>
//int str(char i[])
//{
//	int bb = 0;
//	int a = 0;
//	while (i[a])
//	{
//		a++;
//		bb++;
//	}
//	return bb;
//}
//int main()
//{
//	char i[15] = "fdkf sd fgnf";
//	int c = strlen(i);
//	printf("%d\n", c);
//	int a = str(i);
//	printf("%d\n", a);
//	return 0;
//}

///       大端存储
#include<stdio.h>
int main()
{
	unsigned int a = 0x12340000;
	unsigned char b = *(unsigned char*)&a;
	printf("%x", b);
	return 0;
}
