#define _CRT_SECURE_NO_WARNINGS 1
//#include<stdio.h>
//#include<string.h>
//int main()
//{
//	char i[] = "dhjffh";
//	char bb[20] = { 0 };
//	strcpy(bb, i);
//	printf("%s", bb);
//	return 0;
//}
////          //逆序字符串
//#include<stdio.h>
//int main()
//{
//    int i = 0;
//    scanf("%d", &i);
//    if (i == 0)
//        printf("0");
//    while (i)
//    {
//        printf("%d", i % 10);
//        i /= 10;
//    }
//    return 0;
//}//


//                 strtok的使用
//#include<stdio.h>
//#include<string.h>
//int main()
//{
//	char i[] = "abc&jdsf.dhs";
//	char str[20] = { 0 };
//	strcpy(str, i); //  复制i到str中
//	char* pp = "&."; //  分割符
//	char* str1 = strtok(str, pp);//在str中找到第一个分割符，并把它变为\0
//	printf("%s\n", str1);
//	str1 = strtok(NULL, pp);//返回第一个分割符后一个指针，再找到第二个分割符，并把它变为\0
//	printf("%s\n", str1);
//	 str1 = strtok(NULL, pp); //返回上一个分割符后一个指针，找到\0结束。
//	printf("%s\n", str1);
//	return 0;
//}

//               strtok的使用2

//#include<stdio.h>
//#include<string.h>
//int main()
//{
//	char i[] = "aaaaakcckcclsfdp";
//	char pp[30] = { 0 };
//	strcpy(pp, i);
//	char* p = "lk";//分割符不要分顺序，只要站到分割符就分割
//	char* str = strtok(pp, p);
//	printf("%s\n", str);
//	str = strtok(NULL, p);
//	printf("%s\n", str);
//	str = strtok(NULL, p);
//	printf("%s\n", str);
//	str = strtok(NULL, p);
//	printf("%s\n", str);
//	return 0;
//}
//                       strtok的循环使用 
//#include<stdio.h>
//#include<string.h>
//int main()
//{
//	char i[] = "aaaaakcckcclsfdp";
//	char pp[30] = { 0 };
//	strcpy(pp, i);
//	char* p = "lk";//分割符不要分顺序，只要站到分割符就分割
//	char* str = NULL;
//	for (char* str = strtok(pp, p); str != NULL; str = strtok(NULL, p))
//	{
//		printf("%s\n", str);
//	}
//	return 0;
//}

//                      strerror的使用
#include<stdio.h>
#include<string.h>
int main()
{
	//printf("%s\n", strerror(0));//打印错误信息，括号中数字代表错误码
	//printf("%s\n", strerror(1));
	//printf("%s\n", strerror(2));
	//printf("%s\n", strerror(3));
	//return 0;
}

//杨氏矩阵
//1 2 3 
//4 5 6
//7 8 9
//
//1 2 3
//2 3 4
//3 4 5  
// 
//有一个数字矩阵，矩阵的每行从左到右是递增的，矩阵从上到下是递增的，请编写程序在这样的矩阵中查找某个数字是否存在。
//要求：时间复杂度小于O(N);//不能简单的遍历数组
#include <stdio.h>
struct Point
{
	int x;
	int y;
};
//
//void find_num_in_young(int arr[3][3], int k, int r, int c)
//{
//	int i = 0;
//	int j = c - 1;
//	int flag = 0;
//	while (i<=r-1 && j>=0)
//	{
//		if (arr[i][j] < k)
//		{
//			i++;
//		}
//		else if (arr[i][j] > k)
//		{
//			j--;
//		}
//		else
//		{
//			//找到了
//			flag = 1;
//			printf("找到了，下标是:%d %d\n", i, j);
//			break;
//		}
//	}
//	if(flag == 0)
//		printf("找不到了\n");
//}

//
//void find_num_in_young(int arr[3][3], int k, int *px, int *py)
//{
//	int i = 0;
//	int j = *py - 1;
//	int flag = 0;
//	while (i <= *px - 1 && j >= 0)
//	{
//		if (arr[i][j] < k)
//		{
//			i++;
//		}
//		else if (arr[i][j] > k)
//		{
//			j--;
//		}
//		else
//		{
//			//找到了
//			flag = 1;
//			*px = i;
//			*py = j;
//			break;
//		}
//	}
//	if (flag == 0)
//	{
//		*px = -1;
//		*py = -1;
//	}
//}
//
//
//int main()
//{
//	int arr[3][3] = { 1,2,3,4,5,6,7,8,9 };
//	int k = 0;
//	scanf("%d", &k);//输入要查找的数字
//	//遍历数组
//	int x = 3;
//	int y = 3;
//	//返回型参数
//	find_num_in_young(arr, k, &x, &y);
//	if (x == -1 && y == -1)
//		printf("找不到\n");
//	else
//		printf("找到了，下标是：%d %d\n", x, y);
//
//	return 0;
//}
//

//实现一个函数，可以左旋字符串中的k个字符
//abcdefghi
//cdefghiab
//
//abcdefghi
//bcdefghia
//cdefghiab
#include <string.h>

//void left_move(char arr[], int k)
//{
//	//每一次只旋转一个字符，把这个动作执行K次
//	int i = 0;
//	int len = strlen(arr);
//	k %= len;
//	for (i = 0; i < k; i++)
//	{
//		//1
//		char tmp = arr[0];
//		//2 把后边的字符全部往前挪动一个位置
//		int j = 0;
//		for (j = 0; j < len - 1; j++)
//		{
//			arr[j] = arr[j + 1];
//		}
//		//3 
//		arr[len - 1] = tmp;
//	}
//}
#include <assert.h>
//
//void reverse(char*left, char*right)
//{
//	assert(left && right);
//	while (left < right)
//	{
//		char tmp = *left;
//		*left = *right;
//		*right = tmp;
//		left++;
//		right--;
//	}
//}
//
//void left_move(char arr[], int k)
//{
//	//每一次只旋转一个字符，把这个动作执行K次
//	int i = 0;
//	int len = strlen(arr);
//	k %= len;
//	reverse(arr, arr+k-1);
//	reverse(arr+k, arr + len - 1);
//	reverse(arr, arr + len - 1);
//}
//
////abcdefghi
////baihgfedc
////cdefghiab
//int main()
//{
//	char arr[] = "abcdefghi";
//	int k = 0;
//	scanf("%d", &k);
//	
//	left_move(arr, k);
//	
//	printf("%s\n", arr);
//
//	return 0;
//}
