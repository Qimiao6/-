#define _CRT_SECURE_NO_WARNINGS 1
//    指针和整形所在字节
//#include<stdio.h>
//int main()
//{
//	char a = 0;
//	char* pp = &a;
//	printf("%d\n", sizeof(a));
//	printf("%d\n", sizeof(pp));
//	return 0;
//}

//        指针减指针
//#include<stdio.h>
//int main()
//{
//	int arr[10] = { 0 };
//	int* pp = arr;
//	int* pp2 = &arr[10];
//	int i =(int)(pp2 - pp);//强制转换为int ，同一连续地址指针相减可以
//	printf("%d", i);       //得到他们之间有多少个元素
//	return 0;    //但指针不能相加
//}
//     


//                           整形提升
//#include<stdio.h>
//int main()
//{
//	char a = 5;
//	char b = 126;
//	char c = a + b;
//	printf("%d", c);//输出-125
//	return 0;
//}

//                 仔细分析

//#include<stdio.h>
//int main()
//{
//	char a = 5;
//	//值是以int类型写入给变量的
//	//5的补码 00000000 00000000 00000000 00000101 //正数原反补码相同
//	//截断放入a中：00000101
//	char b = 126;
//	//126的补码 00000000 00000000 00000000 01111110 //正数原反补码相同
//	//截断放入b中：0111 1110
//	char c = a + b;
//	//小于int类型的值需提升为int类型才能在CPU中的ALU中运算
//	//5的补码   00000000 00000000 00000000 00000101//整形提升符号位为0补0
//	//126的补码 00000000 00000000 00000000 01111110//符号位为1补1
//	//相加      00000000 00000000 00000000 10000011
//	//c是char类型要放进去必须截断为：10000011
//	printf("%d", c);
//	// %d 表示打印有符号整数
//	//所以char需要先整形提升，10000011//符号位为1补1
//	//      11111111 11111111 11111111 10000011(整形提升后得到的是补码)
//	// 反码 11111111 11111111 11111111 10000010 （反码等于补码减1）
//	// 源码 10000000 00000000 00000000 01111101 （源码等于反码符号位不变其他位按位取反）
//	//所以得出
//	return 0;
//}


//     只要涉及运算都会发生整形提升

//#include<stdio.h>
//int main()
//{
//	char i = 0;
//	printf("%u\n", sizeof(i));
//	printf("%u\n", sizeof(+i));//只要涉及运算都变为了4字节
//	printf("%u\n", sizeof(-i));
//	printf("%u\n", sizeof(i+1));
//	return 0;
//}

//代码3-非法表达式
int main()
{
	int i = 10;
	i = i-- - --i * (i = -3) * i++ + ++i;
	printf("i = %d\n", i);
	return 0;
}
