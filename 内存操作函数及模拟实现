#define _CRT_SECURE_NO_WARNINGS 1
//                 memove的使用
//#include<stdio.h>
//#include<string.h>
//void* my_memmove(void* str, const void* str1, size_t num)
//{
//	char* pp = str;
//	if (str < str1)
//	{
//		while (num--)
//		{
//			*(char*)str = *(char*)str1;
//			str = (char*)str + 1;
//			str1 = (char*)str1 + 1;
//		}
//	}
//	else
//	{
//		while (num--)
//		{
//			*((char*)str + num) = *((char*)str1 + num);
//		}
//	}
//	return pp;
//}
//int main()
//{
//	int i = 0;
//	int arr[] = { 1,2,3,4,5,6,7,8,9 };
//	//memmove(arr, &arr[2], 16);//库函数，能拷贝重叠内存
//	my_memmove(&arr[2], arr, 12);//模拟实现memmove
//	for (i = 0; i < 9; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//}

//              memcmp（内存比较）
//#include<stdio.h>
//#include<string.h>
//int my_memcmp(void* str, void* str1, size_t num)
//{
//	while (num--)
//	{
//		if (*(char*)str != *(char*)str1)
//		{
//			if (*(char*)str > *(char*)str1)
//				return 1;
//			else
//				return -1;
//		}
//		str = (char*)str + 1;
//		str1 = (char*)str1 + 1;
//	}
//	return 0;
//}
//int main()
//{
//	char i[] = "aaaaaa";
//	char i1[] = "aaaaaa";
//	//int n = memcmp(i, i1,4);//库函数
//	int n = my_memcmp(i, i1, 4);//模拟实现memcmp
//	if (n < 0)
//		printf("i < i1");
//	else if (n > 0)
//		printf("i > i1");
//	else
//		printf("i = i1");
//	return 0;
//}

//             
