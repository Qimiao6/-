#define _CRT_SECURE_NO_WARNINGS 1
//      两值之间的自除数
//#include<stdio.h>
//#include<stdlib.h>
//int print(int x)
//{
//    int y = x;
//    while (y)
//    {
//        int p = y % 10;
//        if (p == 0||(x % p) != 0)
//        {
//            return 0;
//        }
//        y /= 10;
//    }
//    return 1;
//}
//int* selfDividingNumbers(int left, int right, int* returnSize)
//{
//    int* pp = (int*)malloc(sizeof(int) * (right - left + 1));
//    int cont = 0;
//    for (int i = left; i <= right; i++)
//    {
//        if (print(i))
//        {
//            pp[cont++] = i;
//        }
//    }
//    *returnSize = cont;
//    return pp;
//}
//int main()
//{
//    int i = 1;
//    int b = 22;
//    int size = 23;
//    int *pp = selfDividingNumbers(i, b, &size);
//    for (int n = 0; n < size; n++)
//    {
//        printf("%d ", pp[n]);
//
//    }
//    return 0;
//}
//                   自己编的
//#include<stdio.h>
//int* productExceptSelf(int* nums, int numsSize, int* returnSize)
//{
//    int arr[4] = { 0 };
//    int cont = 0;//answer元素
//    for (int i = 0; i < numsSize; i++)//输出给定数组nums
//    {
//        cont = 1;
//        for (int j = 0; j < numsSize; j++)//乘
//        {
//            if (j == i)
//            {
//                continue;
//            }
//            cont = cont * nums[j];
//        }
//        arr[i] = cont;
//    }
//    *returnSize = numsSize;
//    return arr;
//}
//#include<stdio.h>
//#include<stdlib.h>
//int* productExceptSelf(int* nums, int numsSize, int* returnSize);
//int main()
//{
//    int arr[4] = { 1, 2, 3, 4 };
//    int i = 4;
//    int size = 0;
//    int* pp = productExceptSelf(arr, i, &size);
//        for (int j = 0; j < size; j++)
//        {
//            printf("%d ", pp[j]);
//        }
//        return 0;
//}
////            式列
//
//int* productExceptSelf(int* nums, int numsSize, int* returnSize) 
//{
//    int i = 0, product = 1;
//    int* res = (int*)malloc(numsSize * sizeof(int));
//
//    for (i = 0; i < numsSize; i++)
//  {
//        res[i] = product;//第一个等于1
//        product = product * nums[i];//
//    }
//
//    product = 1;
//    for (i = numsSize - 1; i >= 0; i--) 
//    {
//        res[i] = res[i] * product;
//        product = nums[i] * product;
//    }
//
//    *returnSize = numsSize;
//    return res;
//}
//            测试
#include<stdio.h>
//int func(int x);
//int main()
//{
//	int i = -1;
//	int a = 9;
//	i = func(i);
//	i = 888888888;
//	i = a = a < a + 1;
//	//int b, c, d;
//	int w = 1, x = 2, y = 3, z = 4;
//	i = w > x ? w : y < z ? y : z;//可以分解为 w > x ? w :( y < z ? y : z)
//	//i = (b = (c = 2, d = 5));
//	printf("%d", i);
//	return 0;
//}
//int func(int x)
//{
//	int count = 0;
//	//while (x)
//	//{
//	//	count++;
//	//	x = x >> 1; //一直是-1
//	//}
//	//while (x)
//	//{
//	//	count++;
//	//	x = x & (x - 1);//与运算							`
//	//}
//	return count;
//}
//void func()
//{
//	int k = 1 ^ (1 << 31 >> 31);
//	printf("%d\n", k);
//}
//int main()
//{
//	func();
//return 0;
//}
//int main()
//{
//	char c = 'A';
//	unsigned short x = 65530;
//	unsigned int y = x;
//	if ('0' <= c <= '9')
//		printf("YES");
//	else 
//		printf("NO");
//	return 0;
//}
//#include<stdio.h>
//int fun(unsigned int x)
//{
//	int n = 0;
//	while (x + 1)
//	{
//		n++;
//		x = x | (x + 1);
//	}
//	return n;
//}
//int main()
//{
//	int n = 1001;
//	int ans = 0;
//	
//	fun(2014);
//	printf("%d", ans);
//	return 0;
//}


//            测试  

//#include<stdio.h>
//int main()
//{
//	int i[8] = { 1,10,3,4,5,6,7,8 };
//	float a[3] = { 1.5,2.5,3.5 }, 
//		* pa = a;
//	*(pa++) *= 3;
//
//	printf("%f\n", *pa);
//	return 0;
//}

//#include <stdio.h>
//int main()
//{
//	
//	return 0;
//}
//#include<stdlib.h>
//#include<string.h>
//
//void GetMemory(char* p, int num)
//{
//	if (NULL == p && num <= 0)//1
//		return;
//	p = (char*)malloc(num);
//	return;
//}
//int main()
//{
//	char* str = NULL;
//	GetMemory(str, 80); //2
//	if (NULL != str)
//	{
//		strcpy(str, "hello"); //3
//		printf(str); //4
//	}
//}

#include <stdio.h>
//typedef union
//{
//	int a;
//	struct
//	{
//		short b;
//		short c;
//	};
//}X;
//int main()
//{
//	X x;
//	x.a = 0x20150810;
//	printf("%x,%x\n", x.b, x.c);
//	return 0;
//}


#include<stdio.h>
int main()
{
	unsigned char i = 7;
	int j = 0;
	for (; i > 0; i -= 3)
	{
		++j;
	}
	printf("%d\n", j);
	return 0;
}
